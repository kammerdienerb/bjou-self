# declaration.bjou

abstract type declaration extends typed {
    name_cxt : context
    name     : string
    scope    : (scope ref | none)


    proc init(this) {
        typed.init(this)
        this.name      = str()
    }
}

type vardecl extends declaration {
    type_decl : astref
    expr      : astref

    proc init(this) {
        declaration.init(this)
    }

    proc create() : vardecl {
        r := { vardecl: }
        r.init()
        return r
    }

    proc visit(this, node : ast ref, visitor : visitor_t, arg : void*) : visit_action {
        visitor.pre(node, arg)

        if visitor.vis(node, arg) == visit_action.BREAK
            return visit_action.BREAK

        if d : ast ref = this.type_decl {
            if visit(d, visitor, arg) == visit_action.BREAK {
                return visit_action.BREAK
            }
        }
        if e : ast ref = this.expr {
            if visit(e, visitor, arg) == visit_action.BREAK {
                return visit_action.BREAK
            }
        }

        visitor.post(node, arg)

        return visit_action.CONTINUE
    }
}

type constantdecl extends declaration {
    type_decl : astref
    expr      : astref


    proc init(this) {
        declaration.init(this)
    }

    proc create() : constantdecl {
        r := { constantdecl: }
        r.init()
        return r
    }

    proc visit(this, node : ast ref, visitor : visitor_t, arg : void*) : visit_action {
        visitor.pre(node, arg)

        if visitor.vis(node, arg) == visit_action.BREAK
            return visit_action.BREAK

        if d : ast ref = this.type_decl {
            if visit(d, visitor, arg) == visit_action.BREAK {
                return visit_action.BREAK
            }
        }
        if e : ast ref = this.expr {
            if visit(e, visitor, arg) == visit_action.BREAK {
                return visit_action.BREAK
            }
        }

        visitor.post(node, arg)

        return visit_action.CONTINUE
    }
}

type procdef extends declaration {
    param_decls : astref[...]
    ret_decl    : astref
    stmts       : astref[...]


    proc init(this) {
        declaration.init(this)
        this.param_decls = [...astref]
        this.stmts       = [...astref]
    }

    proc create() : procdef {
        r := { procdef:  }
        r.init()
        return r
    }

    proc visit(this, node : ast ref, visitor : visitor_t, arg : void*) : visit_action {
        visitor.pre(node, arg)

        if visitor.vis(node, arg) == visit_action.BREAK
            return visit_action.BREAK

        foreach ref p in this.param_decls {
            if visit(unsafe_ast_ref(p), visitor, arg) == visit_action.BREAK {
                return visit_action.BREAK
            }
        }

        if visit(unsafe_ast_ref(this.ret_decl), visitor, arg) == visit_action.BREAK {
            return visit_action.BREAK
        }

        foreach ref s in this.stmts {
            if visit(unsafe_ast_ref(s), visitor, arg) == visit_action.BREAK {
                return visit_action.BREAK
            }
        }

        visitor.post(node, arg)

        return visit_action.CONTINUE
    }
}

type templateprocdef extends declaration {
    template_def : astref
    template     : astref


    proc init(this) {
        declaration.init(this)
        this.set_flag(ast_flag.IS_TEMPLATE)
    }

    proc create() : templateprocdef {
        r := { templateprocdef:  }
        r.init()
        return r
    }

    proc visit(this, node : ast ref, visitor : visitor_t, arg : void*) : visit_action {
        visitor.pre(node, arg)

        if visitor.vis(node, arg) == visit_action.BREAK
            return visit_action.BREAK

        if visit(unsafe_ast_ref(this.template_def), visitor, arg) == visit_action.BREAK {
            return visit_action.BREAK
        }
        if visit(unsafe_ast_ref(this.template), visitor, arg) == visit_action.BREAK {
            return visit_action.BREAK
        }

        visitor.post(node, arg)

        return visit_action.CONTINUE
    }
}

type typedef extends declaration {
    extends_or_alias : astref
    declarations     : astref[...]


    proc init(this) {
        declaration.init(this)
        this.declarations = [...astref]
    }

    proc create() : typedef {
        r := { typedef: }
        r.init()
        return r
    }

    proc visit(this, node : ast ref, visitor : visitor_t, arg : void*) : visit_action {
        visitor.pre(node, arg)

        if visitor.vis(node, arg) == visit_action.BREAK
            return visit_action.BREAK

        if e : ast ref = this.extends_or_alias {
            if visit(e, visitor, arg) == visit_action.BREAK {
                return visit_action.BREAK
            }
        }

        foreach ref d in this.declarations {
            if visit(unsafe_ast_ref(d), visitor, arg) == visit_action.BREAK {
                return visit_action.BREAK
            }
        }

        visitor.post(node, arg)

        return visit_action.CONTINUE
    }
}

type templatetypedef extends declaration {
    template_def : astref
    template     : astref


    proc init(this) {
        declaration.init(this)
        this.set_flag(ast_flag.IS_TEMPLATE)
    }

    proc create() : templatetypedef {
        r := { templatetypedef:  }
        r.init()
        return r
    }

    proc visit(this, node : ast ref, visitor : visitor_t, arg : void*) : visit_action {
        visitor.pre(node, arg)

        if visitor.vis(node, arg) == visit_action.BREAK
            return visit_action.BREAK

        if visit(unsafe_ast_ref(this.template_def), visitor, arg) == visit_action.BREAK {
            return visit_action.BREAK
        }
        if visit(unsafe_ast_ref(this.template), visitor, arg) == visit_action.BREAK {
            return visit_action.BREAK
        }

        visitor.post(node, arg)

        return visit_action.CONTINUE
    }
}

type enumdef extends declaration {
    identifiers : string[...]


    proc init(this) {
        declaration.init(this)
        this.identifiers = [...string]
    }

    proc create() : enumdef {
        r := { enumdef: }
        r.init()
        return r
    }

    proc visit(this, node : ast ref, visitor : visitor_t, arg : void*) : visit_action {
        visitor.pre(node, arg)

        if visitor.vis(node, arg) == visit_action.BREAK
            return visit_action.BREAK

        # @incomplete
        # visit each child?

        visitor.post(node, arg)

        return visit_action.CONTINUE
    }
}
