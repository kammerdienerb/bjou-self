
abstract type exprbase extends typed {
    proc init(this) {
        astbase.init(this)
    }
}

type boolliteral extends exprbase {
    val : bool


    proc init(this, val : bool) {
        exprbase.init(this)
        this.val  = val
    }

    proc create(val : bool) : boolliteral {
        r := { boolliteral: }
        r.init(val)

        return r
    }
}

type charliteral extends exprbase {
    val : char


    proc init(this, val : char) {
        exprbase.init(this)

        this.val = val
    }

    proc create(val : char) : charliteral {
        r := { charliteral: }
        r.init(val)

        return r
    }
}

type dynamicarrayliteral extends exprbase {
    type_decl : astref


    proc init(this) {
        exprbase.init(this)
    }

    proc create() : dynamicarrayliteral {
        r := { dynamicarrayliteral:  }
        r.init()
        return r
    }
}

type floatliteral extends exprbase {
    val : f64

    proc init(this, s : string ref) {
        exprbase.init(this)
        # @libc
        sscanf(s.c_str(), "%f", &this.val)
    }

    proc create(s : string ref) : floatliteral {
        r := { floatliteral:  }
        r.init(s)

        return r
    }
}

type integerliteral extends exprbase {
    s_val      : i64
    u_val      : u64
    is_hex     : bool
    is_signed  : bool
    has_neg    : bool
    has_suffix : bool
    width      : u32


    proc init(this, s : string ref) {
        exprbase.init(this)

        if  s.len() > 1
        and s[0] == '-'
            this.has_neg = true

        if  s.len() > 2
        and s[0] == '0'
        and s[1] == 'x' {
            this.is_hex = true
        }

        # capture and remove suffix
        suffix := str()
        pos    := s.find('i')
        if pos == -1
            pos = s.find('u')
        if pos != -1 {
            while pos < s.len() {
                suffix.append(s[pos])
                pos += 1
            }
            for i := 0; i < suffix.len(); i += 1
                s.pop()
        }

        # the defaults
        this.is_signed = true
        this.width     = 32

        if this.is_hex {
            # @libc
            sscanf(s.c_str(), "%llx", &this.u_val)
            
            this.is_signed = false

            bytes := (s.len() - 2) bshr 1
            if bytes == 0
                bytes = 1
            else if (bytes band 0x1)
                bytes += 1

            this.width = bytes bshl 0x3
        }

        if suffix.len() == 0 {
            # @libc
            sscanf(s.c_str(), "%lld", &this.s_val)
        } else {
            this.has_suffix = true

            if suffix[0] == 'u' {
                this.is_signed = false
            }

            # @libc
            sscanf(suffix.c_str() + 1, "%u", &this.width)

            if this.is_signed {
                # @libc
                sscanf(s.c_str(), "%lld", &this.s_val)
            } else {
                # @libc
                sscanf(s.c_str(), "%llu", &this.u_val)
            }
        }
    
        suffix.free()

        # We own s, but don't need it any more. Free it.
        s.free() 
    }

    proc create(s : string ref) : integerliteral {
        r := { integerliteral:  }
        r.init(s)

        return r
    }

    proc check(this) {
        if this.has_neg and this.s_val == 0 {
            ui::warning_builder.create()
                .with_message("Ignoring negative sign on literal with value 0.")
                .add_location(this.cxt)
                .report()
                .free()
        }

        if this.is_signed and this.is_hex {
            ui::warning_builder.create()
                .with_message("Ignoring signed suffix specification.")
                .add_note("Hex literals are always unsigned.")
                .add_location(this.cxt)
                .report()
                .free()
        }
        
        if this.has_suffix and not this.is_signed and this.has_neg {
            ui::error_builder.create()
                .with_message("Literal is negative, but type suffix specifies unsigned.")
                .add_location(this.cxt)
                .report()
        }
        
        fits := true 
        if this.is_signed {
            fits = int_fits_in_width(this.s_val, this.width)
        } else {
            fits = uint_fits_in_width(this.u_val, this.width)
        }

        if not fits {
            if this.has_suffix {
                ui::error_builder.create()
                    .with_message("Literal value is invalid for type specified in its suffix.")
                    .add_note("value can't be represented with the specified width")
                    .add_location(this.cxt)
                    .report()
            } else {
                this.width = 64
            }
        }
    }
}


proc int_fits_in_width(s_val : i64, width : u32) : bool {
    if        width == 8 {
        if s_val > I8_MAX or s_val < I8_MIN
            return false
    } else if width == 16 {
        if s_val > I16_MAX or s_val < I16_MIN
            return false
    } else if width == 32 {
        if s_val > I32_MAX or s_val < I32_MIN
            return false
    }
    return true
}

proc uint_fits_in_width(u_val : u64, width : u32) : bool {
    if        width == 8 {
        if u_val > U8_MAX
            return false
    } else if width == 16 {
        if u_val > U16_MAX
            return false
    } else if width == 32 {
        if u_val > U32_MAX
            return false
    }
    return true
}

type nothingliteral extends exprbase {
    proc init(this) {
        exprbase.init(this)
    }

    proc create() : nothingliteral {
        r := { nothingliteral: }
        r.init()

        return r
    }
}

type sliceliteral extends exprbase {
    src    : astref
    start  : astref
    length : astref


    proc init(this) {
        exprbase.init(this)
    }

    proc create() : sliceliteral {
        r := { sliceliteral:  }
        r.init()
        return r
    }
}

type stringliteral extends exprbase {
    val : string

    proc init(this, s : string ref) {
        exprbase.init(this)
        this.val = s
    }

    proc create(s : string ref) : stringliteral {
        r := { stringliteral:  }
        r.init(s)

        return r
    }
}

type tupleliteral extends exprbase {
    exprs : astref[...]


    proc init(this) {
        exprbase.init(this)
        this.exprs = [...astref]
    }

    proc create() : tupleliteral {
        r := { tupleliteral:  }
        r.init()
        return r
    }
}

type qidentifier extends exprbase {
    sym_name      : string
    sym_mod       : string
    template_inst : astref

    
    proc init(this) {
        exprbase.init(this)
    }

    proc create() : qidentifier {
        r := { qidentifier:  }
        r.init()
        return r
    }
    
    proc create(name : char*) : qidentifier {
        r := qidentifier.create()
        r.sym_name.set(name)
        return r
    }
    
    proc create(name : string) : qidentifier {
        r := qidentifier.create()
        r.sym_name.set(name)
        return r
    }
}

type namedarg extends exprbase {
    name : string
    expr : astref

    
    proc init(this) {
        exprbase.init(this)
    }

    proc create() : namedarg {
        r := { namedarg:  }
        r.init()
        return r
    }
}

type initializerlist extends exprbase {
    names     : string[...]
    type_decl : astref
    exprs     : astref[...]


    proc init(this) {
        exprbase.init(this)
        this.names = [...string]
        this.exprs = [...astref]
    }

    proc create() : initializerlist {
        r := { initializerlist:  }
        r.init()
        return r
    }
}

type addrexpr extends exprbase {
    right : astref


    proc init(this) {
        exprbase.init(this)
    }

    proc create() : addrexpr {
        r := { addrexpr: }
        r.init()
        return r
    }
}

type andexpr extends binexprbase {
    proc init(this) {
        binexprbase.init(this)
    }

    proc create() : andexpr {
        r := { andexpr: }
        r.init()
        return r
    }
}

type asexpr extends exprbase {
    expr      : astref
    type_decl : astref


    proc init(this) {
        exprbase.init(this)
    }

    proc create() : asexpr {
        r := { asexpr: }
        r.init()
        return r
    }
}

type assignexpr extends binexprbase {
    proc init(this) {
        binexprbase.init(this)
    }

    proc create() : assignexpr {
        r := { assignexpr: }
        r.init()
        return r
    }
}

type bandexpr extends binexprbase {
    proc init(this) {
        binexprbase.init(this)
    }

    proc create() : bandexpr {
        r := { bandexpr: }
        r.init()
        return r
    }
}


abstract type binexprbase extends exprbase {
    left  : astref
    right : astref


    proc init(this) {
        exprbase.init(this)
    }
}

type bnegexpr extends exprbase {
    right : astref


    proc init(this) {
        exprbase.init(this)
    }

    proc create() : bnegexpr {
        r := { bnegexpr: }
        r.init()
        return r
    }
}

type borexpr extends binexprbase {
    proc init(this) {
        binexprbase.init(this)
    }

    proc create() : borexpr {
        r := { borexpr: }
        r.init()
        return r
    }
}

type bshlexpr extends binexprbase {
    proc init(this) {
        binexprbase.init(this)
    }

    proc create() : bshlexpr {
        r := { bshlexpr: }
        r.init()
        return r
    }
}

type bshrexpr extends binexprbase {
    proc init(this) {
        binexprbase.init(this)
    }

    proc create() : callexpr {
        r := { callexpr: }
        r.init()
        return r
    }
}

type bxorexpr extends binexprbase {
    proc init(this) {
        binexprbase.init(this)
    }

    proc create() : bxorexpr {
        r := { bxorexpr: }
        r.init()
        return r
    }
}

type callexpr extends binexprbase {
    proc init(this) {
        binexprbase.init(this)
    }

    proc create() : callexpr {
        r := { callexpr: }
        r.init()
        return r
    }
}

type deleteexpr extends exprbase {
    right : astref
    

    proc init(this) {
        exprbase.init(this)
    }

    proc create() : deleteexpr {
        r := { deleteexpr:  }
        r.init()
        return r
    }
}

type derefexpr extends exprbase {
    right : astref


    proc init(this) {
        exprbase.init(this)
    }

    proc create() : derefexpr {
        r := { derefexpr:  }
        r.init()
        return r
    }
}

type divassignexpr extends binexprbase {
    proc init(this) {
        binexprbase.init(this)
    }

    proc create() : divassignexpr {
        r := { divassignexpr: }
        r.init()
        return r
    }
}

type divexpr extends binexprbase {
    proc init(this) {
        binexprbase.init(this)
    }

    proc create() : divexpr {
        r := { divexpr: }
        r.init()
        return r
    }
}

type dotexpr extends binexprbase {
    proc init(this) {
        binexprbase.init(this)
    }

    proc create() : dotexpr {
        r := { dotexpr: }
        r.init()
        return r
    }
}

type equexpr extends binexprbase {
    proc init(this) {
        binexprbase.init(this)
    }

    proc create() : equexpr {
        r := { equexpr: }
        r.init()
        return r
    }
}

type geqexpr extends binexprbase {
    proc init(this) {
        binexprbase.init(this)
    }

    proc create() : geqexpr {
        r := { geqexpr: }
        r.init()
        return r
    }
}

type gtrexpr extends binexprbase {
    proc init(this) {
        binexprbase.init(this)
    }

    proc create() : gtrexpr {
        r := { gtrexpr: }
        r.init()
        return r
    }
}

type lenexpr extends exprbase {
    expr : astref


    proc init(this) {
        exprbase.init(this)
    }

    proc create() : lenexpr {
        r := { lenexpr:  }
        r.init()
        return r
    }
}

type leqexpr extends binexprbase {
    proc init(this) {
        binexprbase.init(this)
    }

    proc create() : leqexpr {
        r := { leqexpr: }
        r.init()
        return r
    }
}

type lssexpr extends binexprbase {
    proc init(this) {
        binexprbase.init(this)
    }

    proc create() : lssexpr {
        r := { lssexpr: }
        r.init()
        return r
    }
}

type minusassignexpr extends binexprbase {
    proc init(this) {
        binexprbase.init(this)
    }

    proc create() : minusassignexpr {
        r := { minusassignexpr: }
        r.init()
        return r
    }
}

type minusexpr extends binexprbase {
    proc init(this) {
        binexprbase.init(this)
    }

    proc create() : minusexpr {
        r := { minusexpr: }
        r.init()
        return r
    }
}

type modassignexpr extends binexprbase {
    proc init(this) {
        binexprbase.init(this)
    }

    proc create() : modassignexpr {
        r := { modassignexpr: }
        r.init()
        return r
    }
}

type modexpr extends binexprbase {
    proc init(this) {
        binexprbase.init(this)
    }

    proc create() : modexpr {
        r := { modexpr: }
        r.init()
        return r
    }
}

type multassignexpr extends binexprbase {
    proc init(this) {
        binexprbase.init(this)
    }

    proc create() : multassignexpr {
        r := { multassignexpr: }
        r.init()
        return r
    }
}

type multexpr extends binexprbase {
    proc init(this) {
        binexprbase.init(this)
    }

    proc create() : multexpr {
        r := { multexpr: }
        r.init()
        return r
    }
}

type neqexpr extends binexprbase {
    proc init(this) {
        binexprbase.init(this)
    }

    proc create() : neqexpr {
        r := { neqexpr: }
        r.init()
        return r
    }
}

type newexpr extends exprbase {
    type_decl : astref


    proc init(this) {
        exprbase.init(this)
    }

    proc create() : newexpr {
        r := { newexpr:  }
        r.init()
        return r
    }
}

type notexpr extends exprbase {
    right : astref


    proc init(this) {
        exprbase.init(this)
    }

    proc create() : notexpr {
        r := { notexpr:  }
        r.init()
        return r
    }
}

type orexpr extends binexprbase {
    proc init(this) {
        binexprbase.init(this)
    }

    proc create() : orexpr {
        r := { orexpr: }
        r.init()
        return r
    }
}

type plusassignexpr extends binexprbase {
    proc init(this) {
        binexprbase.init(this)
    }

    proc create() : plusassignexpr {
        r := { plusassignexpr: }
        r.init()
        return r
    }
}

type plusexpr extends binexprbase {
    proc init(this) {
        binexprbase.init(this)
    }

    proc create() : plusexpr {
        r := { plusexpr: }
        r.init()
        return r
    }
}

type sizeofexpr extends exprbase {
    type_decl : astref


    proc init(this) {
        exprbase.init(this)
    }

    proc create() : sizeofexpr {
        r := { sizeofexpr:  }
        r.init()
        return r
    }
}

type subscriptexpr extends binexprbase {
    proc init(this) {
        binexprbase.init(this)
    }

    proc create() : subscriptexpr {
        r := { subscriptexpr: }
        r.init()
        return r
    }
}
