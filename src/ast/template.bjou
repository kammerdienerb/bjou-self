# template.bjou

type templatedef extends astbase {
    names : string[...]

    proc init(this) {
        astbase.init(this)
        this.names = [...string]
    }

    proc create() : templatedef {
        r := { templatedef: }
        r.init()
        return r
    }

    proc visit(this, node : ast ref, visitor : <(ast ref, void*) : visit_action>, arg : void*) : visit_action {
        return visitor(node, arg)
    }
}

type templateinst extends astbase {
    type_params : astref[...]

    proc init(this) {
        astbase.init(this)
        this.type_params = [...astref]
    }

    proc create() : templateinst {
        r := { templateinst: }
        r.init()
        return r
    }

    proc visit(this, node : ast ref, visitor : <(ast ref, void*) : visit_action>, arg : void*) : visit_action {
        if visitor(node, arg) == visit_action.BREAK
            return visit_action.BREAK

        foreach ref p in this.type_params {
            if visit(unsafe_ast_ref(p), visitor, arg) == visit_action.BREAK {
                return visit_action.BREAK
            }
        }

        return visit_action.CONTINUE
    }
}
