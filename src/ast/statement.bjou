abstract type statement extends astbase {  }


type breakstmt extends statement {
    proc init(this) {
        astbase.init(this)
    }

    proc create() : breakstmt {
        r := { breakstmt: }
        r.init()
        return r
    }

    proc visit(this, node : ast ref, visitor : <(ast ref, void*) : visit_action>, arg : void*) : visit_action {
        return visitor(node, arg)
    }
}

type continuestmt extends statement {
    proc init(this) {
        astbase.init(this)
    }

    proc create() : continuestmt {
        r := { continuestmt: }
        r.init()
        return r
    }

    proc visit(this, node : ast ref, visitor : <(ast ref, void*) : visit_action>, arg : void*) : visit_action {
        return visitor(node, arg)
    }
}

type dowhilestmt extends statement {
    cond  : astref
    stmts : astref[...]


    proc init(this) {
        astbase.init(this)
        this.stmts = [...astref]
    }

    proc create() : dowhilestmt {
        r := { dowhilestmt: }
        r.init()
        return r
    }

    proc visit(this, node : ast ref, visitor : <(ast ref, void*) : visit_action>, arg : void*) : visit_action {
        if visitor(node, arg) == visit_action.BREAK
            return visit_action.BREAK

        if visit(unsafe_ast_ref(this.cond), visitor, arg) == visit_action.BREAK {
            return visit_action.BREAK
        }

        foreach ref s in this.stmts {
            if visit(unsafe_ast_ref(s), visitor, arg) == visit_action.BREAK {
                return visit_action.BREAK
            }
        }

        return visit_action.CONTINUE
    }
}

type elsestmt extends statement {
    stmts : astref[...]


    proc init(this) {
        astbase.init(this)
        this.stmts = [...astref]
    }

    proc create() : elsestmt {
        r := { elsestmt: }
        r.init()
        return r
    }

    proc visit(this, node : ast ref, visitor : <(ast ref, void*) : visit_action>, arg : void*) : visit_action {
        if visitor(node, arg) == visit_action.BREAK
            return visit_action.BREAK

        foreach ref s in this.stmts {
            if visit(unsafe_ast_ref(s), visitor, arg) == visit_action.BREAK {
                return visit_action.BREAK
            }
        }

        return visit_action.CONTINUE
    }
}

type foreachstmt extends statement {
    var   : astref
    expr  : astref
    stmts : astref[...]


    proc init(this) {
        astbase.init(this)
        this.stmts = [...astref]
    }

    proc create() : foreachstmt {
        r := { foreachstmt: }
        r.init()
        return r
    }

    proc visit(this, node : ast ref, visitor : <(ast ref, void*) : visit_action>, arg : void*) : visit_action {
        if visitor(node, arg) == visit_action.BREAK
            return visit_action.BREAK

        if visit(unsafe_ast_ref(this.var), visitor, arg) == visit_action.BREAK {
            return visit_action.BREAK
        }

        if visit(unsafe_ast_ref(this.expr), visitor, arg) == visit_action.BREAK {
            return visit_action.BREAK
        }

        foreach ref s in this.stmts {
            if visit(unsafe_ast_ref(s), visitor, arg) == visit_action.BREAK {
                return visit_action.BREAK
            }
        }

        return visit_action.CONTINUE
    }
}

type forstmt extends statement {
    ini   : astref
    cond  : astref
    step  : astref
    stmts : astref[...]


    proc init(this) {
        astbase.init(this)
        this.stmts = [...astref]
    }

    proc create() : forstmt {
        r := { forstmt: }
        r.init()
        return r
    }

    proc visit(this, node : ast ref, visitor : <(ast ref, void*) : visit_action>, arg : void*) : visit_action {
        if visitor(node, arg) == visit_action.BREAK
            return visit_action.BREAK

        if i : ast ref = this.ini {
            if visit(i, visitor, arg) == visit_action.BREAK {
                return visit_action.BREAK
            }
        }

        if visit(unsafe_ast_ref(this.cond), visitor, arg) == visit_action.BREAK {
            return visit_action.BREAK
        }

        if visit(unsafe_ast_ref(this.step), visitor, arg) == visit_action.BREAK {
            return visit_action.BREAK
        }

        foreach ref s in this.stmts {
            if visit(unsafe_ast_ref(s), visitor, arg) == visit_action.BREAK {
                return visit_action.BREAK
            }
        }

        return visit_action.CONTINUE
    }
}

type ifstmt extends statement {
    cond       : astref
    stmts      : astref[...]
    else_block : astref


    proc init(this) {
        astbase.init(this)
        this.stmts = [...astref]
    }

    proc create() : ifstmt {
        r := { ifstmt: }
        r.init()
        return r
    }

    proc visit(this, node : ast ref, visitor : <(ast ref, void*) : visit_action>, arg : void*) : visit_action {
        if visitor(node, arg) == visit_action.BREAK
            return visit_action.BREAK

        if visit(unsafe_ast_ref(this.cond), visitor, arg) == visit_action.BREAK {
            return visit_action.BREAK
        }

        foreach ref s in this.stmts {
            if visit(unsafe_ast_ref(s), visitor, arg) == visit_action.BREAK {
                return visit_action.BREAK
            }
        }

        if e : ast ref = this.else_block {
            if visit(e, visitor, arg) == visit_action.BREAK {
                return visit_action.BREAK
            }
        }

        return visit_action.CONTINUE
    }
}

type importstmt extends statement {
    path : string


    proc init(this) {
        astbase.init(this)
        this.path = str()
    }

    proc create() : importstmt {
        r := { importstmt: }
        r.init()
        return r
    }

    proc visit(this, node : ast ref, visitor : <(ast ref, void*) : visit_action>, arg : void*) : visit_action {
        return visitor(node, arg)
    }
}

type includestmt extends statement {
    path      : string
    container : (include_container ref | none)


    proc init(this) {
        astbase.init(this)
        this.path = str()
    }

    proc create() : includestmt {
        r := { includestmt: }
        r.init()
        return r
    }

    proc visit(this, node : ast ref, visitor : <(ast ref, void*) : visit_action>, arg : void*) : visit_action {
        return visitor(node, arg)
    }
}

type printstmt extends statement {
    args : astref


    proc init(this) {
        astbase.init(this)
    }

    proc create() : printstmt {
        r := { printstmt: }
        r.init()
        return r
    }

    proc visit(this, node : ast ref, visitor : <(ast ref, void*) : visit_action>, arg : void*) : visit_action {
        if visitor(node, arg) == visit_action.BREAK
            return visit_action.BREAK

        return visit(unsafe_ast_ref(this.args), visitor, arg)
    }
}

type returnstmt extends statement {
    expr : astref


    proc init(this) {
        astbase.init(this)
    }

    proc create() : returnstmt {
        r := { returnstmt: }
        r.init()
        return r
    }

    proc visit(this, node : ast ref, visitor : <(ast ref, void*) : visit_action>, arg : void*) : visit_action {
        if visitor(node, arg) == visit_action.BREAK
            return visit_action.BREAK

        if e : ast ref = this.expr {
            if visit(e, visitor, arg) == visit_action.BREAK {
                return visit_action.BREAK
            }
        }

        return visit_action.CONTINUE
    }
}

type usingstmt extends statement {
    imprt : astref
    ident : string


    proc init(this) {
        astbase.init(this)
        this.ident = str()
    }

    proc create() : usingstmt {
        r := { usingstmt: }
        r.init()
        return r
    }

    proc visit(this, node : ast ref, visitor : <(ast ref, void*) : visit_action>, arg : void*) : visit_action {
        if visitor(node, arg) == visit_action.BREAK
            return visit_action.BREAK

        if i : ast ref = this.imprt {
            if visit(i, visitor, arg) == visit_action.BREAK {
                return visit_action.BREAK
            }
        }

        return visit_action.CONTINUE
    }
}

type whilestmt extends statement {
    cond  : astref
    stmts : astref[...]


    proc init(this) {
        astbase.init(this)
        this.stmts = [...astref]
    }

    proc create() : whilestmt {
        r := { whilestmt: }
        r.init()
        return r
    }

    proc visit(this, node : ast ref, visitor : <(ast ref, void*) : visit_action>, arg : void*) : visit_action {
        if visitor(node, arg) == visit_action.BREAK
            return visit_action.BREAK

        if visit(unsafe_ast_ref(this.cond), visitor, arg) == visit_action.BREAK {
            return visit_action.BREAK
        }

        foreach ref s in this.stmts {
            if visit(unsafe_ast_ref(s), visitor, arg) == visit_action.BREAK {
                return visit_action.BREAK
            }
        }

        return visit_action.CONTINUE
    }
}
