# ty.bjou

module ty

using import "utils.bjou"
using import "hash_table.bjou"
using import "hash_functions.bjou"

type ty    = (tyvoid | tyint | tyfloat | typointer | tystruct | tytemplatestruct | tyenum | tyunknown)
type tyref = (ty ref | none)

type tyunknown {}
type tyvoid { }
type tyint {
    width     : u8
    is_signed : bool
}
type tyfloat { }
type typointer { }

type tystruct {
    field_types : tyref[...]

    proc create_from_node(node : ast ref) : tystruct {
        t := { tystruct: }

        t.field_types = [...tyref]

        if s : typedef = node {
            foreach decl in s.declarations {
                # @unsafe
                # The parser won't allow nodes in typedef.declarations to be 'nothing'.
                f_node := unsafe_ast_ref(decl)

                if f : vardecl = f_node {
                    # @unsafe
                    # The parser ensures that the vardecl has a type_decl.
                    type_decl_node := unsafe_ast_ref(f.type_decl)
                    field_t        := declarator_to_ty(type_decl_node)

                    t.field_types.push(field_t)
                }
            }
        } else {
            debug_assert(false, "node is not a typedef")
        }

        return t
    }
}

type tyenum {
    names : string[...]

    proc create_from_node(node : ast ref) : tyenum {
        return { tyenum: }
    }
}

type tytemplatestruct {
    proc create_from_node(node : ast ref) : tytemplatestruct {
        return { tytemplatestruct: }
    }
}

proc install_builtin_types(type_table : hash_table$(string, ty, str_hasher) ref) {
    s := str()

    s.set("void")
        type_table.insert(s, {tyvoid:})
}
