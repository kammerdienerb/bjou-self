# scope.bjou

module scope


using import "hash_table.bjou"
using import "pair.bjou"
using import "bucket_array.bjou"
using import "thread.bjou"


using import "hash_functions.bjou"
using import "ast.bjou"
using import "ty.bjou"
using import "ui.bjou"
using import "debug.bjou"
using import "utils.bjou"

type symbol_table = hash_table$(string, astref, str_hasher)

type overload_set {
    procs : astref[...]


    proc create() : overload_set {
        return { overload_set:
            .procs = [...astref]
        }
    }
}
type overload_table  = hash_table$(string, overload_set, str_hasher)

type scope {
    parent_scope : (scope ref | none)
    is_module    : bool
    module_name  : string
    sub_scopes   : scope*[...]
    symbols      : symbol_table
    overloads    : overload_table
    usings       : string[...]


    proc create_common(parent_scope : scope ref) : scope {
        return { scope:
            .parent_scope = parent_scope,
            .sub_scopes   = [...scope*],
            .symbols      = symbol_table.create(),
            .overloads    = overload_table.create(),
            .usings       = [...string]
        }
    }

    proc create(parent_scope : scope ref, module_name : string ref) : scope {
        r := scope.create_common(parent_scope)
        r.is_module   = true
        r.module_name = module_name.copy()

        return r
    }

    proc create(parent_scope : scope ref) : scope {
        r := scope.create_common(parent_scope)
        r.is_module   = false
        r.module_name = str()

        return r
    }

    proc is_in_module(this) : bool {
        m_s : (scope ref | none) = this

        while s : scope ref = m_s {
            if s.is_module {
                return true
            }

            m_s = s.parent_scope
        }

        return false
    }

    proc add_using(this, us : string ref) {
        this.usings.push(us)
    }

#     proc add_subscope(this, sub_scope : scope) : scope ref {
#         scope_ref := alloc_sub_scope(sub_scope)
#         this.sub_scopes.push(&scope_ref)
#         return scope_ref
#     }

    # @libc
    proc show(this, indent_level : u32) {
        printf("%*s", 4 * indent_level, "")
        if this.is_module {
            printf("module %s ", this.module_name.c_str())
        }
        printf("{\n")
        indent_level += 1
        for it := this.symbols.iter(); not it.is_end(); it.next() {
            printf("%*s", 4 * indent_level, "")
            printf("%s", it.val().first.c_str())
            if it.val().second.is_none() {
                if overload_search : pair$(string ref, overload_set ref) = this.overloads.lookup(it.val().first) {
                    printf(" (%d overloads)", |overload_search.second.procs|)
                } else debug_assert(false, "overload set not found")
            }
            printf("\n")
        }

        if |this.sub_scopes| {
            printf("\n")
        }

        foreach sub_ptr in this.sub_scopes {
            (@sub_ptr).show(indent_level)
        }
        indent_level -= 1
        printf("%*s}\n", 4 * indent_level, "")
    }
}

type module_scope_table = hash_table$(string, i32, str_hasher)

type globalscope extends scope {
    module_scopes : module_scope_table


    proc create() : globalscope {
        return { globalscope:
            .sub_scopes         = [...scope*],
            .symbols            = symbol_table.create(),
            .overloads          = overload_table.create(),
            .is_module          = false,
            .module_name        = str(),
            .module_scopes      = module_scope_table.create(),
        }
    }

    proc get_module_scope_by_idx(this, idx : i32) : scope ref {
        module_scope := this.sub_scopes[idx]
        debug_assert(module_scope.is_module, "not a module scope")

        return @module_scope
    }

    proc get_or_add_module_scope_idx(this, module_name : string ref) : i32 {
        if search : pair$(string ref, i32 ref) = this.module_scopes.lookup(module_name) {
            return search.second
        }

        idx := len(this.sub_scopes)
        scope_ref := fe_alloc_sub_scope(scope.create(this, module_name))
        this.sub_scopes.push(&scope_ref)
        scope_ref.is_module = true
        this.module_scopes.insert(module_name, idx)

        return idx
    }

    proc get_module_scope(this, module_name : string ref) : (scope ref | none) {
        if search : pair$(string ref, i32 ref) = this.module_scopes.lookup(module_name) {
            return @(this.sub_scopes[search.second])
        }

        return nothing
    }

    proc show(this) {
        printf("global scope ")
        scope.show(this, 0)
    }
}

proc single_scope_lookup(s : scope ref, name : string ref) : (ast ref | overload_set ref | none) {
    m_search := s.symbols.lookup(name)

    if search : pair$(string ref, astref ref) = m_search {
        if node : ast ref = search.second {
            return node
        } else {
            m_overload_search := s.overloads.lookup(name)
            if overload_search : pair$(string ref, overload_set ref) = m_overload_search {
                return overload_search.second
            }
        }
    }

    return nothing
}

proc find_in_module_scope(mod : string ref, name : string ref) : (ast ref | overload_set ref | none) {
    m_mod_scope := (@compil).front.global_scope.get_module_scope(mod)

    if mod_scope : scope ref = m_mod_scope {
        return single_scope_lookup(mod_scope, name)
    }

    return nothing
}

proc find_in_scope(s : scope ref, mod : string ref, name : string ref) : (ast ref | overload_set ref | none) {
    m_scope : (scope ref | none) = s

    if mod.len() {
        return find_in_module_scope(mod, name)
    }

    while search_scope : scope ref = m_scope {
        search := single_scope_lookup(search_scope, name)
        if not search.is_none() { return search }

        m_scope = search_scope.parent_scope
    }

#     foreach us

    return nothing
}

proc resolve_identifier(i : qidentifier ref) {
    debug_assert(i.enclosing_scope != NULL, "no scope on qidentifier")

    m_pair := (@compil).front.type_table.lookup(i.sym_name)i
    if key_val : pair$(string ref, ty ref) = m_pair {
        i.set_flag(ast_flag.IDENTIFIER_IS_BUILTIN_TYPE)
        return
    }

    result := find_in_scope(@(i.enclosing_scope), i.sym_mod, i.sym_name)

    if result.is_none() { use_of_undeclared_error(i) }
}

proc search_for_already_defined(s : scope ref, name : string ref) : (ast ref | overload_set ref | none) {
    m_scope : (scope ref | none) = s

    s_is_in_module := s.is_in_module()

    while search_scope : scope ref = m_scope {
        # Don't look at the global scope if in a module.
        # This allows symbols to be shadowed within modules
        # (which is good because modules won't know the global
        # symbols of the codebase they're imported to), but still
        # prevents symbol shadowing at global scope.
        if s_is_in_module and search_scope.parent_scope.is_none() { break }

        search := single_scope_lookup(search_scope, name)
        if not search.is_none() { return search }

        m_scope = search_scope.parent_scope
    }

    return nothing
}

proc add_to_scope(s : scope ref, node : ast ref) {
    if decl : declaration = node {
        if s.is_module {
            decl.name = concat(s.module_name.copy(), str("::"), decl.name)
        }

        search := search_for_already_defined(s, decl.name)
        if search.is_none() {
            # Normal symbol.
            # The symbol table is taking ownership of 'name'.
            s.symbols.insert(decl.name, node)
        } else {
            if ex : ast ref = search {
                # The symbol exists, but isn't in an overload_set.
                if ex_decl : declaration = ex {
                    if not can_be_overload(ex) {
                        redefinition_error(decl.name, decl, ex_decl)
                    } else if not can_be_overload(node) {
                        redefinition_cant_overload_error(decl.name, decl, ex_decl)
                    }

                    init_overload(s, decl.name, ex, node)

                } else debug_assert(false, "not a declaration")
            } else if ov : overload_set ref = search {
                # Already an overloaded procedure moved to an overload_set.
                if not can_be_overload(node) {
                    ex_proc := unsafe_ast_ref(ov.procs.back())
                    if ex_decl : declaration = ex_proc {
                        redefinition_cant_overload_error(decl.name, decl, ex_decl)
                    } else debug_assert(false, "not a declaration")
                }
                add_overload(s, decl.name, node)
            }
        }

    } else debug_assert(false, "not a declaration")
}

proc init_overload(s : scope ref, name : string ref, existing_proc : ast ref, new_proc : ast ref) {
    # Make a new overload_set and move symbols to it.
    # The overload_table is taking ownership of 'name'.

    inserted := s.overloads.insert(name, overload_set.create())
    inserted.second.procs.push(existing_proc)
    inserted.second.procs.push(new_proc)

    # Mark the symbol table entry as an overload by replacing the
    # ast ref with 'nothing'.
    s.symbols.insert(name, nothing)
}

proc add_overload(s : scope ref, name : string ref, new_proc : ast ref) {
    if search : pair$(string ref, overload_set ref) = s.overloads.lookup(name) {
        search.second.procs.push(new_proc)
    } else debug_assert(false, "missing overload set")
}

proc can_be_overload(node : ast ref) : bool {
    is_overloadable := false

    if      p   : procdef         = node    { is_overloadable = true }
    else if t_p : templateprocdef = node    { is_overloadable = true }

    return is_overloadable
}

proc use_of_undeclared_error(i : qidentifier ref) {
    err_str := str("Use of undeclared identifier '")
    err_str.append(i.sym_name)
    err_str.append("'.")

    ui::error_builder.create()
        .with_message(err_str.c_str())
        .add_location(i.cxt)
        .report()
}

proc redefinition_error(name : string ref, decl : declaration ref, ex : declaration ref) {
    err_str := str("Redefinition of '")
    err_str.append(name)
    err_str.append("'.")

    ui::error_builder.create()
        .with_message(err_str.c_str())
        .add_location(decl.name_cxt)
        .add_location("Previous declaration:", ex.name_cxt)
        .report()
}

proc redefinition_cant_overload_error(name : string ref, decl : declaration ref, ex : declaration ref) {
    err_str := str("Redefinition of '")
    err_str.append(name)
    err_str.append("'.")

    ui::error_builder.create()
        .with_message(err_str.c_str())
        .add_location(decl.name_cxt)
        .add_note("non-procedure symbol can't be added as an overload")
        .add_location("Previous declaration:", ex.name_cxt)
        .report()
}
